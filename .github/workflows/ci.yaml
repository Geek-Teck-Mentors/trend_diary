name: CI

on:
  push:
    branches:
      - main
    paths:
      - '.github/workflows/ci.yaml'
      - '.github/workflows/cd.yaml'
      - 'src/**'
      - 'public/**'
      - 'prisma/**'
      - 'package.json'
      - 'package-lock.json'
  pull_request:
    branches:
      - main
    paths:
      - 'src/**'
      - '.github/workflows/ci.yaml'
      - 'vitest/**'
      - 'package.json'
      - 'package-lock.json'

# カバレッジの可視化で、コメントを残すための権限
permissions:
  contents: read
  pull-requests: write

# 連続push時に同じジョブが並列で実行されるのを防ぐ
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# 共通の設定を定義
env:
  NODE_VERSION_FILE: .node-version
  DATABASE_URL: postgresql://postgres:password@localhost:5432/postgres # Supabase側で変更できず、Supabaseの設定と整合性を保つため

jobs:
  setup-config:
    runs-on: ubuntu-latest
    outputs:
      runner: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Node.jsの構築
        uses: ./.github/actions/setup_node
        with:
          node-version-file: ${{ env.NODE_VERSION_FILE }}
      - name: Prismaキャッシュのセットアップ
        uses: ./.github/actions/setup_prisma_cache
        with:
          schema-path: prisma/main.prisma
      - run: echo "Setup completed"

  lint:
    needs: setup-config
    runs-on: ${{ needs.setup-config.outputs.runner }}
    steps:
      - uses: actions/checkout@v4
      - name: Node.jsの構築
        uses: ./.github/actions/setup_node
        with:
          node-version-file: ${{ env.NODE_VERSION_FILE }}

      - name: Lint
        run: npm run lint

  format:
    needs: setup-config
    runs-on: ${{ needs.setup-config.outputs.runner }}
    steps:
      - uses: actions/checkout@v4
      - name: Node.jsの構築
        uses: ./.github/actions/setup_node
        with:
          node-version-file: ${{ env.NODE_VERSION_FILE }}

      - name: Format
        run: npm run format

  # 本来であれば、概念的にコンパイルはLint/Formatと同列ではないが、実行時間短縮のために並列実行にしている
  ts-compile-check:
    needs: setup-config
    runs-on: ${{ needs.setup-config.outputs.runner }}
    steps:
      - uses: actions/checkout@v4
      - name: Node.jsの構築
        uses: ./.github/actions/setup_node
        with:
          node-version-file: ${{ env.NODE_VERSION_FILE }}

      - name: Prismaキャッシュのセットアップ
        uses: ./.github/actions/setup_prisma_cache
        with:
          schema-path: prisma/main.prisma

      - name: TypeScript型チェック
        run: npm run check-types

  setup-test:
    needs: [lint, format, ts-compile-check]
    runs-on: ubuntu-latest
    outputs:
      test_runner: ubuntu-latest
      run_frontend_test: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' || steps.check-frontend.outputs.diff-count != 0 }}
      run_e2e_test: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' || steps.check-e2e.outputs.diff-count != 0 }}
      run_service_test: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' || steps.check-service.outputs.diff-count != 0 }}
      run_api_test: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' || steps.check-api.outputs.diff-count != 0 }}
    steps:
      - uses: actions/checkout@v4
      - name: Node.jsの構築
        uses: ./.github/actions/setup_node
        with:
          node-version-file: ${{ env.NODE_VERSION_FILE }}

      - name: フロントエンドの差分チェック
        id: check-frontend
        uses: ./.github/actions/diff
        with:
          subdir: 'src/application/web src/application/web/components vitest/'
          exclude_pattern: 'src/application/web/components/ui'

      - name: E2Eの差分チェック
        id: check-e2e
        uses: ./.github/actions/diff
        with:
          subdir: 'src/test/e2e src/application/web/routes'

      - name: サービスの差分チェック
        id: check-service
        uses: ./.github/actions/diff
        with:
          subdir: 'src/domain vitest/'

      - name: APIの差分チェック
        id: check-api
        uses: ./.github/actions/diff
        with:
          subdir: 'src/application/api vitest/'

      - name: 差分結果の表示
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "メインブランチなので、リグレッションテストとして全て実行"
          else
            echo "フロントエンド差分: ${{ steps.check-frontend.outputs.diff-count }} ファイル"
            echo "E2E差分: ${{ steps.check-e2e.outputs.diff-count }} ファイル"
            echo "サービス差分: ${{ steps.check-service.outputs.diff-count }} ファイル"
            echo "API差分: ${{ steps.check-api.outputs.diff-count }} ファイル"
            echo "テストの準備完了"
          fi
        shell: bash

  test-frontend:
    needs: setup-test
    runs-on: ${{ needs.setup-test.outputs.test_runner }}
    if: ${{ needs.setup-test.outputs.run_frontend_test == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - name: Node.jsの構築
        uses: ./.github/actions/setup_node
        with:
          node-version-file: ${{ env.NODE_VERSION_FILE }}

      - name: フロントエンドのテスト
        uses: ./.github/actions/test_cov
        with:
          target: frontend

  test-e2e:
    # E2Eテストは時間がかかるため、タイムアウトを設定
    timeout-minutes: 10
    needs: setup-test
    runs-on: ${{ needs.setup-test.outputs.test_runner }}
    if: ${{ needs.setup-test.outputs.run_e2e_test == 'true' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 完全な履歴を取得して差分比較できるようにする
      - name: Node.jsの構築
        uses: ./.github/actions/setup_node
        with:
          node-version-file: ${{ env.NODE_VERSION_FILE }}

      - name: Playwrightブラウザのキャッシュ
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
      - name: Playwrightのセットアップ
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install chromium --with-deps

      # ページの結合、シナリオテスト実施のためにDBが必要
      - name: PostgreSQLのセットアップ
        run: docker compose build && docker compose up -d

      - name: PostgreSQLが起動するまで待機
        uses: ./.github/actions/backoff
        with:
          command: 'docker exec $(docker ps -q -f name=postgres) pg_isready -U postgres'
          fail_command: docker compose down

      - name: Prismaキャッシュのセットアップ
        uses: ./.github/actions/setup_prisma_cache
        with:
          schema-path: prisma/main.prisma

      - name: DB Migration
        env:
          DIRECT_URL: ${{ env.DATABASE_URL }}
        run: npm run db:migrate

      - name: E2Eテストの差分実行
        if: github.event_name == 'pull_request'
        run: |
          if git rev-parse --verify $GITHUB_BASE_REF &>/dev/null; then
            npm run e2e -- --only-changed=$GITHUB_BASE_REF
          else
            echo "ベースブランチが見つからないため、全てのテストを実行します"
            npm run e2e
          fi

      - name: E2Eテストの実行
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: npm run e2e

      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  test-service:
    needs: setup-test
    runs-on: ${{ needs.setup-test.outputs.test_runner }}
    if: ${{ needs.setup-test.outputs.run_service_test == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - name: Node.jsの構築
        uses: ./.github/actions/setup_node
        with:
          node-version-file: ${{ env.NODE_VERSION_FILE }}

      - name: サービスのテスト
        uses: ./.github/actions/test_cov
        with:
          target: service

  test-api:
    needs: setup-test
    runs-on: ${{ needs.setup-test.outputs.test_runner }}
    if: ${{ needs.setup-test.outputs.run_api_test == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - name: Node.jsの構築
        uses: ./.github/actions/setup_node
        with:
          node-version-file: ${{ env.NODE_VERSION_FILE }}

      - name: PostgreSQLのセットアップ
        run: docker compose build && docker compose up -d

      - name: PostgreSQLが起動するまで待機
        uses: ./.github/actions/backoff
        with:
          command: 'docker exec $(docker ps -q -f name=postgres) pg_isready -U postgres'
          fail_command: docker compose down

      - name: Prismaキャッシュのセットアップ
        uses: ./.github/actions/setup_prisma_cache
        with:
          schema-path: prisma/main.prisma

      - name: DB Migration
        env:
          DIRECT_URL: ${{ env.DATABASE_URL }}
        run: npm run db:migrate

      - name: APIのテスト
        uses: ./.github/actions/test_cov
        with:
          target: api
