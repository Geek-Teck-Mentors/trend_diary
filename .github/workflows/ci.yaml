name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    paths:
      - 'src/**'
      - '.github/workflows/ci.yaml'
      - 'vitest.config.frontend.ts'
      - 'vitest.config.backend.ts'
      - 'package.json'
      - 'package-lock.json'

# カバレッジの可視化で、コメントを残すための権限
permissions:
  contents: read
  pull-requests: write

# 連続push時に同じジョブが並列で実行されるのを防ぐ
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# 共通の設定を定義
env:
  NODE_VERSION_FILE: .node-version
  DATABASE_URL: postgresql://postgres:password@localhost:5432/postgres # Supabase側で変更できず、Supabaseの設定と整合性を保つため

jobs:
  setup-config:
    runs-on: ubuntu-latest
    outputs:
      runner: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Node.jsの構築
        uses: ./.github/actions/setup_node
        with:
          node-version-file: ${{ env.NODE_VERSION_FILE }}
      - run: echo "Setup completed"

  lint:
    needs: setup-config
    runs-on: ${{ needs.setup-config.outputs.runner }}
    steps:
      - uses: actions/checkout@v4
      - name: Node.jsの構築
        uses: ./.github/actions/setup_node
        with:
          node-version-file: ${{ env.NODE_VERSION_FILE }}

      - name: Lint
        run: npm run lint

  format:
    needs: setup-config
    runs-on: ${{ needs.setup-config.outputs.runner }}
    steps:
      - uses: actions/checkout@v4
      - name: Node.jsの構築
        uses: ./.github/actions/setup_node
        with:
          node-version-file: ${{ env.NODE_VERSION_FILE }}

      - name: Format
        run: npm run format

  # 本来であれば、概念的にコンパイルはLint/Formatと同列ではないが、実行時間短縮のために並列実行にしている
  ts-compile-check:
    needs: setup-config
    runs-on: ${{ needs.setup-config.outputs.runner }}
    steps:
      - uses: actions/checkout@v4
      - name: Node.jsの構築
        uses: ./.github/actions/setup_node
        with:
          node-version-file: ${{ env.NODE_VERSION_FILE }}

      - name: TypeScript型チェック
        run: npm run check-types

  setup-test:
    needs: [lint, format, ts-compile-check]
    runs-on: ubuntu-latest
    outputs:
      test_runner: ubuntu-latest
      run_frontend_test: ${{ steps.check-frontend.outputs.diff-count != 0 }}
      run_backend_test: ${{ steps.check-backend.outputs.diff-count != 0 }}
    steps:
      - uses: actions/checkout@v4
      - name: Node.jsの構築
        uses: ./.github/actions/setup_node
        with:
          node-version-file: ${{ env.NODE_VERSION_FILE }}

      - name: フロントエンドの差分チェック
        id: check-frontend
        uses: ./.github/actions/diff
        with:
          subdir: 'src/application/web src/application/web/components'
          exclude_pattern: 'src/application/web/components/ui'

      - name: バックエンドの差分チェック
        id: check-backend
        uses: ./.github/actions/diff
        with:
          subdir: src
          exclude_pattern: 'src/application/web/ src/application/middleware/ src/logger/'

      - name: 差分結果の表示
        run: |
          echo "フロントエンド差分: ${{ steps.check-frontend.outputs.diff-count }} ファイル"
          echo "バックエンド差分: ${{ steps.check-backend.outputs.diff-count }} ファイル"
          echo "Test configuration completed"
        shell: bash

  test-frontend:
    needs: setup-test
    runs-on: ${{ needs.setup-test.outputs.test_runner }}
    if: ${{ needs.setup-test.outputs.run_frontend_test == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - name: Node.jsの構築
        uses: ./.github/actions/setup_node
        with:
          node-version-file: ${{ env.NODE_VERSION_FILE }}

      - name: フロントエンドのテスト
        uses: ./.github/actions/test_cov
        with:
          target: frontend

  test-backend:
    needs: setup-test
    runs-on: ${{ needs.setup-test.outputs.test_runner }}
    if: ${{ needs.setup-test.outputs.run_backend_test == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - name: Node.jsの構築
        uses: ./.github/actions/setup_node
        with:
          node-version-file: ${{ env.NODE_VERSION_FILE }}

      - name: PostgreSQLのセットアップ
        run: docker compose build && docker compose up -d

      - name: PostgreSQLが起動するまで待機
        uses: ./.github/actions/backoff
        with:
          command: 'docker exec $(docker ps -q -f name=postgres) pg_isready -U postgres'
          fail_command: docker compose down

      - name: DB Migration
        run: npm run db:migrate

      - name: バックエンドのテスト
        uses: ./.github/actions/test_cov
        with:
          target: backend
