name: Cloudflare Preview Deploy

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.filter.outputs.should_deploy }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            should_deploy:
              - 'src/**'
              - 'prisma/**'
              - 'package.json'
              - 'package-lock.json'
              - 'wrangler.toml'
              - 'tsconfig.json'
              - 'vite.config.ts'
              - '.github/workflows/preview-deploy.yml'

  deploy-preview:
    needs: check-changes
    if: github.event.action != 'closed' && needs.check-changes.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      deployments: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Node.jsの構築
        uses: ./.github/actions/setup_node
        with:
          node-version-file: .node-version

      - name: Prismaクライアント生成
        run: npx prisma generate

      - name: ビルド
        run: npm run build

      - name: Create GitHub Deployment
        id: create_deployment
        uses: actions/github-script@v7
        with:
          script: |
            const { data: deployment } = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'preview',
              auto_merge: false,
              required_contexts: [],
              description: `Preview deployment for PR #${{ github.event.pull_request.number }}`
            });
            console.log(`Created deployment: ${deployment.id}`);
            return deployment.id;

      - name: Upload Preview Version to Cloudflare Workers
        id: deploy
        run: |
          # PR番号からプレビューエイリアスを生成
          PR_NUMBER=${{ github.event.pull_request.number }}
          PREVIEW_ALIAS="pr-${PR_NUMBER}"

          # 新しいバージョンをアップロード（本番デプロイしない）
          npx wrangler versions upload --preview-alias "${PREVIEW_ALIAS}" > deploy-output.txt

          # プレビューURLを抽出
          DEPLOY_URL=$(grep -oP 'https://[^\s]+workers\.dev' deploy-output.txt | head -1)
          echo "deploy_url=${DEPLOY_URL}" >> $GITHUB_OUTPUT

          # クリーンアップ
          rm deploy-output.txt
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Update Deployment Status
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.create_deployment.outputs.result }},
              state: 'success',
              environment_url: '${{ steps.deploy.outputs.deploy_url }}',
              description: 'Preview deployment is ready',
              auto_inactive: false
            });

      - name: Update Deployment Status on Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.create_deployment.outputs.result }},
              state: 'failure',
              description: 'Preview deployment failed'
            });

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const deployUrl = '${{ steps.deploy.outputs.deploy_url }}';
            const prNumber = context.payload.pull_request.number;
            const commentBody = `## 🚀 Cloudflare Preview Deploy

            プレビュー環境が正常にデプロイされたよ！

            **Preview URL:** ${deployUrl}

            ---

            ℹ️ このプレビュー環境のWeb/APIは分離されているが、DBは本番環境を参照している
            ℹ️ PRがクローズされると自動的に削除される`;

            // 既存のコメントを検索
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('🚀 Cloudflare Preview Deploy')
            );

            if (botComment) {
              // 既存のコメントを更新
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              // 新規コメントを作成
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody
              });
            }

  cleanup-preview:
    if: github.event.action == 'closed'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      deployments: write

    steps:
      - name: Delete Preview Alias Deployment
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          PREVIEW_ALIAS="pr-${PR_NUMBER}"
          SCRIPT_NAME="trend-diary"

          # プレビューエイリアスに関連するデプロイメントを一覧取得
          DEPLOYMENTS=$(curl -s "https://api.cloudflare.com/client/v4/accounts/${CLOUDFLARE_ACCOUNT_ID}/workers/scripts/${SCRIPT_NAME}/deployments" \
            -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
            -H "Content-Type: application/json")

          # プレビューエイリアスに一致するデプロイメントIDを抽出
          DEPLOYMENT_ID=$(echo "$DEPLOYMENTS" | jq -r ".result[] | select(.annotations.\"workers/triggered_by\" == \"upload\" and .annotations.\"workers/preview-alias\" == \"${PREVIEW_ALIAS}\") | .id" | head -1)

          if [ -n "$DEPLOYMENT_ID" ] && [ "$DEPLOYMENT_ID" != "null" ]; then
            echo "Deleting deployment: ${DEPLOYMENT_ID} for alias: ${PREVIEW_ALIAS}"

            # デプロイメントを削除
            curl -X DELETE "https://api.cloudflare.com/client/v4/accounts/${CLOUDFLARE_ACCOUNT_ID}/workers/scripts/${SCRIPT_NAME}/deployments/${DEPLOYMENT_ID}" \
              -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
              -H "Content-Type: application/json"

            echo "Preview deployment deleted successfully"
          else
            echo "No deployment found for preview alias: ${PREVIEW_ALIAS}"
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Mark GitHub Deployment as Inactive
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ github.event.pull_request.number }};

            // preview環境のデプロイメントを取得
            const { data: deployments } = await github.rest.repos.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              environment: 'preview'
            });

            // このPRに関連するデプロイメントを探す
            const prDeployments = deployments.filter(d =>
              d.description && d.description.includes(`PR #${prNumber}`)
            );

            // 各デプロイメントをinactiveにする
            for (const deployment of prDeployments) {
              await github.rest.repos.createDeploymentStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: deployment.id,
                state: 'inactive',
                description: 'Preview environment cleaned up'
              });
              console.log(`Marked deployment ${deployment.id} as inactive`);
            }
