name: Functions CI

on:
  push:
    branches:
      - main
    paths:
      - 'supabase/**'
      - '.github/workflows/functions_ci.yaml'
  pull_request:
    branches:
      - main
    paths:
      - 'supabase/**'
      - '.github/workflows/functions_ci.yaml'

env:
  DENO_VERSION: 2.3.1
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Denoの構築
        uses: denoland/setup-deno@v2
        with:
          deno-version: ${{ env.DENO_VERSION }}
      - name: Lint
        run: deno lint -c supabase/style_config.json

  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Denoの構築
        uses: denoland/setup-deno@v2
        with:
          deno-version: ${{ env.DENO_VERSION }}
      - name: Format
        run: deno fmt --check -c supabase/style_config.json

  type-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Denoの構築
        uses: denoland/setup-deno@v2
        with:
          deno-version: ${{ env.DENO_VERSION }}
      - name: Type Check
        # deno checkのファイル指定で`**`を使うと、サブディレクトリのファイルがチェックされなくなるため、全部のディレクトリを手動でそれぞれ指定する
        # deno checkはdeno.jsonのある環境でしか実行できないため、各関数のdeno.jsonを指定する
        run: |
          for function_name in $(ls supabase/functions); do
            find supabase -name "*.ts" | xargs deno check -c supabase/functions/$function_name/deno.json
          done

  test:
    needs: [lint, format, type-check]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Denoの構築
        uses: denoland/setup-deno@v2
        with:
          deno-version: ${{ env.DENO_VERSION }}

      - name: setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Node.jsの構築(DBのマイグレーション用)
        uses: ./.github/actions/setup_node
        with:
          node-version-file: .node-version

      - name: supabase start
        run: supabase start -x storage-api,imgproxy,edge-runtime,realtime,vector,studio,postgres-meta,mailpit,logflare,supavisor

      # SUPABASE_URL, SUPABASE_ANON_KEY, DB_URLはSupabase CLIを起動した後に取得できるため、supabase startの後に設定
      - name: Setup ENV
        run: |
          echo "SUPABASE_URL=$(supabase status --output json | jq -r '.API_URL')" >> $GITHUB_ENV
          echo "SUPABASE_ANON_KEY=$(supabase status --output json | jq -r '.ANON_KEY')" >> $GITHUB_ENV
          echo "DB_URL=$(supabase status --output json | jq -r '.DB_URL')" >> $GITHUB_ENV

      - name: DBのマイグレーション
        run: npm run db:migrate
        env:
          DIRECT_URL: ${{ env.DB_URL }}
          DATABASE_URL: ${{ env.DB_URL }}

      - name: Deno testの実行
        env:
          SUPABASE_URL: ${{ env.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ env.SUPABASE_ANON_KEY }}
          NO_COLOR: true
        # deno testはdeno.jsonのある環境でしか実行できないため、各関数のディレクトリで実行する
        run: |
          for function_name in $(ls supabase/functions); do
            # サブシェルで実行することで、cdの影響を局所化
            (
              cd supabase/functions/$function_name

              # deno testの実行
              deno test --allow-read --allow-env --allow-net --allow-write --allow-run -c deno.json --coverage=coverage
            )
          done
      - name: coverageをlcov形式で出力
        run: |
          for function_name in $(ls supabase/functions); do
            (
              cd supabase/functions/$function_name
              deno coverage --lcov --output=coverage/${function_name}.lcov
            )
          done
      - name: Octocovでカバレッジを報告
        uses: k1LoW/octocov-action@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
